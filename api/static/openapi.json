{
  "openapi": "3.0.3",
  "info": {
    "title": "InSync API",
    "description": "This API allows user management for registration, login, password recovery, profile updates, and user group management. It supports functionalities like user authentication,  password reset, file downloads, and user and group retrieval.",
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Flask API",
    "url": "http://flask.pocoo.org/"
  },
  "tags": [
    {
      "name": "user",
      "description": "Operations related to user registration, login, password management, and group management."
    }
  ],
  "paths": {
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the web app",
        "description": "Logs in a user by verifying credentials and generates a JWT token on success.",
        "operationId": "loginUser",
        "requestBody": {
          "description": "User login credentials",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of the user.",
                    "example": "user1"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password of the user.",
                    "example": "12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "headers": {
              "Authorization": {
                "description": "JWT token for authentication",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "correct credentials"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Incorrect credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "wrong credentials"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Registers a new user",
        "description": "Registers a new user with provided details and sends registration form for admin approval.",
        "operationId": "registerUser",
        "requestBody": {
          "description": "New user registration details",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "user1"
                  },
                  "email": {
                    "type": "string",
                    "example": "user1@email.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345"
                  },
                  "first_name": {
                    "type": "string",
                    "example": "John"
                  },
                  "last_name": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "role": {
                    "type": "string",
                    "example": "student"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration successful, awaiting admin approval",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Registration Form sent to the Administrator, please wait for the approval"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email or Username already used",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Email already used"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/forgotpwd": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Initiates password reset process",
        "description": "Sends a password reset link to the user email.",
        "operationId": "forgotPassword",
        "requestBody": {
          "description": "Email address for password reset",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "user1@email.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If a user with the email exists, a reset email is sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "If a user with the email 'user1@email.com' exists, a recovery email has been sent."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/reset_password": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Resets the user password",
        "description": "Allows a user to reset their password via the reset link. The reset token should be passed in the query parameter .",
        "operationId": "resetPassword",
        "requestBody": {
          "description": "New password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "example": "newpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password has been changed successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized due to expired or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Token has expired"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Retrieve users",
        "description": "Retrieves a list of users with filtering options.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Filter by username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter by email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "Filter by role",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "account_status",
            "in": "query",
            "description": "Filter by account status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isLogged",
            "in": "query",
            "description": "Filter by login status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/groups": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Retrieve user groups",
        "description": "Retrieves groups associated with the user. Please make sure to include the JWT token in the Authorization header as a Bearer token to access this endpoint",
        "operationId": "getUserGroups",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of user groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rooms": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "room_id": {
                            "type": "integer"
                          },
                          "room_type": {
                            "type": "string"
                          },
                          "users": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "user_id": {
                                  "type": "integer"
                                },
                                "username": {
                                  "type": "string"
                                },
                                "email": {
                                  "type": "string"
                                },
                                "first_name": {
                                  "type": "string"
                                },
                                "last_name": {
                                  "type": "string"
                                },
                                "profile_picture": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized due to expired or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Token has expired"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User is not a member of any rooms",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User is not a member of any rooms"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/uploads/{name}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Download a file",
        "description": "Allows users to download a file from the uploads folder.",
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "description": "Name of the file to download",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File downloaded successfully",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "File not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "user1"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "user1@email.com"
          },
          "role": {
            "type": "string",
            "example": "user"
          },
          "account_status": {
            "type": "string",
            "example": "active"
          },
          "isLogged": {
            "type": "boolean",
            "example": true
          },
          "profile_picture": {
            "type": "string",
            "example": "profile.jpg"
          }
        },
        "required": [
          "username",
          "password",
          "email",
          "first_name",
          "last_name",
          "role"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}